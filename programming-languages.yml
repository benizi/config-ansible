- name: Prog langs
  hosts: 'laptops:&arch'
  vars:
    rubybuild: '{{gitbuild}}/ruby-build'
    cljtoolsversion: 1.9.0.391
    cljtoolssha: |
      9f49ceefb34b9d0effcc410578d4985779f4f2d136fc33ae6cb08684eeb2409c
    cljtoolsfile: clojure-tools-{{cljtoolsversion}}.tar.gz
  tasks:
    - name: Install Verman
      git: repo=gh:benizi/verman
        dest=/opt/verman
        remote=benizi

    # Verman uses ruby-build to install rubies
    - name: Fetch ruby-build
      git: repo=gh:sstephenson/ruby-build
        dest={{rubybuild}}
        remote=sstephenson
      notify: Install ruby-build

    - meta: flush_handlers

    # Stack needs an old version of `ncurses`, but it will be replaced with an
    # AUR package providing compatibility libs, once `aura` gets installed.
    # TODO: check if this is still needed with newer versions of Stack(/GHC?).
    - name: Stack old ncurses link
      become: true
      shell: |
        test -e /lib/libtinfo.so.5 && exit 0
        /opt/nix/bin/nix-env --query --no-name --out-path ncurses-5.9 |
        xargs -iZ find Z -name libncurses.so.5 |
        xargs -iZ ln -vnsf Z /lib/libtinfo.so.5
      register: nix_ncurses
      changed_when: nix_ncurses.stdout != ""

    - name: Old GCC (prereq for some Ruby versions)
      pacman:
        name: gcc6
      become: true

    - name: Install langs
      shell: verman {{item.lang}} installed 2>/dev/null | grep -Fxq {{item.version}} ||
        verman {{item.lang}} install {{item.version}} | with-python2 sh
      register: verman
      changed_when: verman.stdout != ''
      with_items:
        - { lang: erlang, version: '17.5.1' } # needed for old CouchDB
        - { lang: erlang, version: '18.1.5' }
        - { lang: elixir, version: v1.2.1 }
        - { lang: go, version: go1.4.1 } # needed to bootstrap newer Go
        - { lang: go, version: go1.5.2 }
        - { lang: node, version: v5.6.0 }
        - { lang: ruby, version: '2.2.2' }
        - { lang: rust, version: '1.6.0' }
        - { lang: stack, version: 'v1.0.2' }

    - name: Java
      become: true
      archpkg: name={{item}}
      with_items:
        - jdk7-openjdk
        - jdk8-openjdk
        - java-openjfx
        - apache-ant
        - gradle
        - maven
        - aur/jdk

    - name: OpenJDK8 source
      shell: hg tclone http://hg.openjdk.java.net/jdk8/jdk8
        /opt/java/openjdk8
        creates=/opt/java/openjdk8

    - name: Pythons (ensure both installed)
      become: true
      pacman: name={{item}}
      with_items:
        - python
        - python2
        - python2-virtualenv # provides virtualenv2

    - name: PHP
      become: true
      pacman: name={{item}}
      with_items:
        - php
        - php-docs
        - php-fpm
        - php-memcache
        - php-pgsql
        - php-xsl

    - name: Clojure (leiningen) download
      get_url: url=https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
        dest={{homedir}}/bin.local/lein
        mode=0750

    - name: Clojure (leiningen) initial install
      command: lein version
        creates={{homedir}}/.lein/self-installs

    - name: Clojure Boot
      get_url: url=https://github.com/boot-clj/boot-bin/releases/download/2.4.2/boot.sh
        dest={{homedir}}/bin.local/boot
        mode=0750

    - name: Clojure Boot initial install
      command: boot
        creates={{homedir}}/.boot/boot.properties

    - name: Clojure (clj) download
      get_url:
        url: https://download.clojure.org/install/{{cljtoolsfile}}
        sha256sum: '{{cljtoolssha}}'
        dest: '{{gitbuild}}/{{cljtoolsfile}}'

    - name: Clojure (clj) verman dirs
      file:
        dest: /opt/clj/{{item.0}}/{{cljtoolsversion}}/{{item.1}}
        state: directory
      with_items:
        - [[unpack, '']]
        - [[versions, lib]]
        - [[versions, bin]]
        - [[versions, share/man/man1]]
        - [[versions, lib/clojure/libexec]]

    - name: Clojure (clj) unpack
      shell: |
        set -e
        cd /opt/clj/unpack/{{cljtoolsversion}}
        prefix="/opt/clj/versions/{{cljtoolsversion}}"
        tar xf {{gitbuild}}/{{cljtoolsfile}}
        for fullpath in \
          lib/clojure/deps.edn \
          lib/clojure/example-deps.edn \
          lib/clojure/libexec/clojure-tools-{{cljtoolsversion}}.jar \
          bin/clojure \
          bin/clj \
          share/man/man1/clojure.1 \
          share/man/man1/clj.1
        do
          file="$(basename "$fullpath")"
          dir="$(dirname "$fullpath")"
          dest="$prefix/$dir/$file"
          cp "clojure-tools/$file" "$dest"
          test "$dir" = bin && x=x || x=
          chmod u+w,ugo+r$x "$dest"
        done
        sed -i -e 's@=PREFIX@="'"$prefix/lib/clojure"'"@' "$prefix/bin/clojure"

    - name: Lua
      become: true
      pacman: name={{item}}
      with_items:
        - lua51
        - lua-filesystem

    - name: GNU APL
      become: true
      archpkg: name=aur/gnu-apl

    - name: APLX prereqs
      become: true
      archpkg: name={{item}}
      with_items:
        - aur/libjpeg6-turbo
        - lib32-libsm
        - lib32-libx11
        - lib32-libxext

    - name: Z3 (Liquid Haskell solver prereq)
      become: true
      archpkg: name=aur/z3

    - name: Urbit prereqs
      become: true
      pacman: name=libsigsegv

    - name: Tcl
      become: true
      pacman: name=tcl

  handlers:
    - name: Install ruby-build
      command: ./install.sh
        chdir={{rubybuild}}
