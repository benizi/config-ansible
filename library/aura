#!/usr/bin/env python2
### TODO ^^^ wrong for anything but Arch Linux
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: aura
short_description: Manage packages with I(aura)
description:
    - like `pacman`, but for `aura` and only for packages in AUR
version_added: n/a
author: Benjamin R. Haskell
notes: []
requirements: []
options:
    name:
        description:
            - Name of the aur package to install, upgrade, or remove.
        required: true
        default: null
    state:
        description:
            - Desired state of aur package.
        required: false
        default: present
        choices: [present, absent, latest]
'''

EXAMPLES = '''
# Install aur package xyz
- aura: name=xyz
'''

import re
from ansible.module_utils.basic import *

class AuraModule(AnsibleModule):
    def __init__(self, *args, **kwargs):
        super(AuraModule, self).__init__(*args, **kwargs)
        self.run_command_environ_update['GNUPGHOME'] = '/etc/pacman.d/gnupg'

    def get_bin_path(self, *args, **kwargs):
        origpath = os.environ['PATH']
        try:
            user = os.environ['SUDO_USER'] or os.environ['USER']
            os.environ['PATH'] = ''.join([
                os.path.expanduser('~%s/.local/bin' % user),
                os.pathsep,
                origpath])
            return super(AuraModule, self).get_bin_path(*args, **kwargs)
        finally:
            os.environ['PATH'] = origpath

def uncolor(output):
    return re.sub(r'\x1b\[[^m]*m', '', output)

def parse_version(output):
    '''Parse version out of aura -Qi or aura -Si output.'''
    for line in uncolor(output).split('\n'):
        if line.startswith('Version'):
            return line.split(':')[1].strip()
    return None

def _version(module, aura, pkg, flag):
    rc, out, err = module.run_command([aura, flag, pkg], check_rc=False)
    if rc != 0:
        return False
    return parse_version(out)

def installed_version(module, aura, pkg):
    return _version(module, aura, pkg, '-Qi')

def available_version(module, aura, pkg):
    return _version(module, aura, pkg, '-Ai')

def query(module, aura, pkg, state='present'):
    if state == 'present':
        lcmd = [aura, '-Qi', pkg]
        lrc, lout, lerr = module.run_command(lcmd, check_rc=False)
        if lrc != 0:
            return False, False
        rcmd = [aura, '-Ai', pkg]
        rrc, rout, rerr = module.run_command(rcmd, check_rc=False)

        lver = parse_version(lout)
        rver = parse_version(rout)

        if rrc == 0:
            return True, (lver == rver)
        return False, False

def install(module, aura, pkg, state):
    installed = installed_version(module, aura, pkg)
    if installed and state == 'present':
        module.exit_json(changed=False, msg='package already installed')
    available = available_version(module, aura, pkg)
    if state == 'latest' and installed and installed == available:
        module.exit_json(changed=False, msg='package already latest')
    if module.check_mode:
        module.exit_json(changed=True, msg="%s would be %s" % (pkg, state))
    cmd = [aura, '-A', pkg, '--noconfirm']
    rc, out, err = module.run_command(cmd, check_rc=False)
    failures = []
    plain_out = uncolor(out)
    if 'have to use `sudo`' in plain_out:
        failures.push('`aura` requires root')
    if '==> ERROR: ' in plain_out:
        failures.push("Error message in output:\n" + plain_out)
    if err:
        failures.push("Output on stderr:\n" + err)
    if rc != 0:
        failures.push("Non-zero exit code: %s" % rc)
    if failures:
        msg = 'Failed to install %s' % (pkg)
        msg += ":\n%s" % plain_out
        msg += "\n" + "\n".join(failures)
        module.fail_json(msg=msg,stdout=out,stderr=err,rc=rc)
    module.exit_json(
            changed=True,
            msg='installed %s' % (pkg),
            stdout=out,
            stderr=err,
            rc=rc)

def main():
    module = AuraModule(
            argument_spec = dict(
                name = dict(),
                state = dict(default='present', choices=['present', 'latest', 'absent']),
            ),
            supports_check_mode = True)
    aura = module.get_bin_path('aura', True)
    p = module.params
    if p['name']:
        pkg = p['name']
        state = p['state']

        if state == 'present' or state == 'latest':
            install(module, aura, pkg, state)
        elif state == 'absent':
            remove(module, aura, pkg)

if __name__ == '__main__':
    main()
