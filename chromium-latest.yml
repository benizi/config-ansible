- name: Chromium Latest
  hosts: arch
  vars:
    arch: "{{'_x64' if ansible_machine == 'x86_64' else ''}}"
    update: false
    # Revision information. Found in {{yaml}} after running with update=true.
    # Google Cloud Storage provides MD5 in metadata, but Base64-encoded.
    cl: 498337
    date: 2017-08-30
    md5Hash: gCLLO0t5DnSel8SlVeSluQ==
    cache: "{{gitbuild}}/chromium.zip"
    lastchange: "{{cache}}.lastchange"
    lastchangeobject: LAST_CHANGE
    metadata: "{{cache}}.metadata.json"
    yaml: "{{cache}}.revision.yml"
    prefix: '/opt/google/chromium/{{date}}'
    # Utilities for finding upstream information
    bucket: https://www.googleapis.com/storage/v1/b/chromium-browser-snapshots
    shellfns: |
      set -e
      objectpath() { printf 'Linux{{arch}}/%s\n' "$*" | sed -e 's;/;%2F;g' ; }
      objectmeta() { printf '%s/o/%s\n' "{{bucket}}" "$(objectpath "$1")" ; }

  tasks:
    - name: Find latest revision number
      shell: |
        {{shellfns}}
        objectmeta "{{lastchangeobject}}" |
        xargs curl -s |
        tee "{{lastchange}}.json" |
        jq -r .mediaLink |
        xargs curl -s |
        sed a\\ |
        tee "{{lastchange}}"
      args:
        creates: "{{omit if update else lastchange}}"

    - name: Find latest revision metadata
      shell: |
        {{shellfns}}
        if {{update|lower}}
        then read cl < {{lastchange}}
        else cl={{cl}}
        fi
        objectmeta $cl/chrome-linux.zip |
        xargs curl -s |
        tee "{{metadata}}.$cl" |
        tee "{{metadata}}"
      args:
        creates: "{{omit if update else metadata}}"

    - name: Generate YAML for latest revision
      shell: |
        set -e
        cat "{{metadata}}" |
        jq -r '
        {
          cl: .metadata["cr-commit-position-number"],
          date: (.timeCreated|split("T")|.[0]),
          md5Hash: .md5Hash
        } |
        to_entries |
        map("    \(.key): \(.value)") |
        join("\n")' |
        tee "{{yaml}}"
      args:
        creates: '{{yaml}}'

    - name: Parse MD5 for download
      shell: |
        {{shellfns}}
        if {{update|lower}}
        then jq -r .md5Hash < "{{metadata}}"
        else echo {{md5Hash}}
        fi |
        openssl enc -d -a |
        xxd -p |
        sed 's/^/md5:/'
      register: parsechecksum
      changed_when: false
      check_mode: no

    - name: Parse URL for download
      shell: 'jq -r .mediaLink < "{{metadata}}"'
      register: parseurl
      changed_when: false
      check_mode: no

    - name: Download latest version
      get_url:
        dest: '{{cache}}'
        url: '{{parseurl.stdout}}'
        checksum: '{{parsechecksum.stdout}}'

    - name: Install latest version
      shell: |
        set -e
        # acrobatics here just to strip a leading directory name
        mkdir -p {{prefix}}
        tmp="$(mktemp -d)"
        ln -s {{prefix}} "$tmp/chrome-linux"
        unzip -d "$tmp" {{cache}}
        rm -r "$tmp"
      args:
        creates: '{{prefix}}/chrome'
