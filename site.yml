---
- name: Arch packaging
  hosts: arch
  sudo: true
  vars:
    mirrorlist: /etc/pacman.d/mirrorlist
    repos: [testing, core, extra, community, multilib]

  tasks:
    - name: Disable all repos (no includes)
      lineinfile: dest=/etc/pacman.conf
        state=absent
        regexp='^Include\s*=\s*{{mirrorlist}}\s*$'
      notify: Update packages

    - name: Disable all repos (no sections)
      lineinfile: dest=/etc/pacman.conf
        line='#[{{item}}]'
        regexp='\[{{item}}\]'
      with_items: repos
      notify: Update packages

    - name: Add include for chosen repos
      lineinfile: dest=/etc/pacman.conf
        line='Include = /etc/pacman.d/repo.*'
      notify: Update packages

    - name: Create files for each repo
      copy: content='[{{item.1}}]\nInclude = {{mirrorlist}}\n'
        dest=/etc/pacman.d/repo.{{item.0}}.{{item.1}}
        owner=root
        group=root
        mode=0644
      with_indexed_items: repos
      notify: Update packages

    - name: Atlassian repo
      copy: src=files/atlassian.repo
        dest=/etc/pacman.d/repo.atlassian
        owner=root
        group=root
        mode=0644
      notify:
        - Atlassian key
        - Update packages

  handlers:
    - name: Atlassian key
      shell: curl https://www.hipchat.com/keys/hipchat-linux.key |
        GNUPGHOME=/etc/pacman.d/gnupg gpg --import

    - name: Update packages
      command: pacman -Syy

- name: Sudo umask
  hosts: arch
  sudo: true
  tasks:
    - name: Override user umask
      copy: content='Defaults umask = 0022\nDefaults umask_override\n'
        dest=/etc/sudoers.d/20_umask
        owner=root
        group=root
        mode=0644

- name: Inotify limits
  hosts: laptops
  sudo: yes
  tasks:
    - name: Increase inotify user limit
      sysctl: name=fs.inotify.max_user_watches value=16384 sysctl_set=yes

- name: Arch sysctl compatibility
  hosts: arch
  sudo: yes
  tasks:
    - name: Link file to systemd location
      file: state=link
        src=/etc/sysctl.conf
        dest=/etc/sysctl.d/99-sysctl.conf

- name: Prereqs
  hosts: arch
  sudo: true
  tasks:
    - name: Very basic prereqs
      pacman: name={{item}}
      with_items:
        - git
        - ntp
        - polkit
        - vim-minimal
        - zsh

    - name: X Server prereqs
      pacman: name={{item}}
      with_items:
        - xorg-server
        - xf86-video-intel
        - xf86-input-evdev
        - xf86-input-keyboard
        - xf86-input-mouse
        - xf86-input-synaptics
        - xorg-xauth

    - name: X-related idiosyncratic prereqs
      pacman: name={{item}}
      with_items:
        - perl-ipc-run # for my keyboard wrapper
        - xdotool
        - xorg-twm # fallback window manager
        - xorg-xinput
        - xorg-xmodmap
        - xorg-xprop
        - xorg-xrandr

- name: Set up NTP
  hosts: all
  sudo: true
  tasks:
    - name: Set up NTP
      service: name=ntpd state=started enabled=yes
      register: ntp

    # next tasks set the clock initially
    - name: Stop existing
      service: name=ntpd state=stopped
      when: ntp.changed

    - name: Set clock initially
      command: ntpdate -s time.nist.gov
      when: ntp.changed

    - name: Restart NTP after setting clock
      service: name=ntpd state=started
      when: ntp.changed

- name: Initial .ssh/config
  hosts: all
  tasks:
    - name: .ssh directory
      file: state=directory dest=.ssh mode=0700

    - name: .ssh/config
      copy: content="Host gh\nHostName github.com\nUser git\n"
        dest=.ssh/config
        mode=0640
        force=no

    - name: SSH known hosts
      sudo: yes
      copy: src=files/ssh_known_hosts
        dest=/etc/ssh/ssh_known_hosts
        owner=root
        group=root
        mode=0644

- name: Development
  hosts: arch # TODO: others
  sudo: true
  tasks:
    - name: Standard compiling prereqs
      pacman: name={{item}}
      with_items:
        - autoconf
        - automake
        - bison
        - cmake
        - flex
        - gcc-multilib
        - libtool
        - make
        - patch
        - pkg-config

- name: Custom dmenu
  hosts: arch
  vars:
    dmenu: git/dmenu

  tasks:
    - name: Custom dmenu source
      git: repo='gh:benizi/dmenu'
        dest={{dmenu}}
        remote=benizi

    - name: Custom dmenu build
      shell: make && make install
        chdir={{dmenu}}
        creates=/usr/local/bin/dmenu

- name: XMonad
  hosts: arch
  tasks:
    - name: XMonad prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - dzen2 # status bars
        - ghc
        - ruby # needed for scripts, will be overridden later
        - xlockmore # screensaver
        - xorg-xdm
        - xorg-xmessage

    - name: Cabal (Haskell package manager)
      sudo: yes
      pacman: name=cabal-install
      notify: Set up cabal

    - meta: flush_handlers

    - name: Cabal packages
      shell: cabal info {{item}} | grep -L 'Versions.installed.*Not.installed' | grep -q . ||
        cabal install {{item}}
      with_items:
        - darcs
        - FindBin
        - xmonad
        - xmonad-contrib
      register: cabal
      changed_when: cabal.stdout != ''

    - name: Enable services
      sudo: yes
      service: name=xdm state=started enabled=yes

  handlers:
    - name: Set up cabal
      command: cabal update

- name: Dotfiles
  hosts: laptops
  tasks:
    - name: Directories
      file: state=directory dest=~bhaskell/{{item}}
      with_items:
        - bin.local
        - .cache
        - git
        - .lein
        - .vim.local
        - .zsh.local

    - name: Clone latest dotfiles
      git: repo=gh:benizi/dotfiles
        dest=dotfiles
        update=yes
        remote=benizi

    # TODO: replace this and the next task with script within dotfiles repo
    - name: Link dotfiles (simple)
      file: state=link src=dotfiles/{{item}} dest={{item}}
      with_items:
        - bin
        - .emacs.d
        - .gitattributes.global
        - .gitconfig
        - .gitignore.global
        - perl-lib
        - .pg
        - .psqlrc
        - .python
        - .terminfo
        - .tmux.conf
        - .urxvt
        - .Xdefaults
        - .xmonad
        - .xsession

    # TODO: see prior TODO
    - name: Link dotfiles (non-homedir)
      file: state=link src={{item.src}} dest={{item.dest}}
      with_items:
        - { src: ../dotfiles/.config/feh, dest: .config/feh }
        - { src: ../dotfiles/.lein/profiles.clj, dest: .lein/profiles.clj }
        - { src: dotfiles/.vim/vimrc, dest: .vimrc }
        - { src: dotfiles/.zsh/.zshenv, dest: .zshenv }

    - name: Root zsh
      sudo: yes
      file: state=link src=~bhaskell/.zshenv dest=~root/.zshenv

    - name: Set up build for bin.local files
      file: state=link src=../bin/{{item}} dest=bin.local/{{item}}
      with_items:
        - Makefile
        - src

    - name: Set shell
      sudo: true
      user: name=bhaskell shell=/bin/zsh

    - name: Script prereqs
      sudo: true
      pacman: name={{item}}
      with_items:
        - inotify-tools
        - perl-algorithm-diff
        - perl-cgi
        - perl-date-manip

    - name: Script prereqs (compiled)
      command: make {{item}}
        chdir=bin.local
        creates={{item}}
      with_items:
        - myod
        - x-is-active

- name: Personal directories
  hosts: laptops
  tasks:
    - name: Own some 'system' directories
      shell: find {{item}} -xdev -maxdepth 1 2>&1 >/dev/null | grep -L . | grep -q . ||
        set-all-facl u:bhaskell -v -R {{item}}
      with_items:
        - /mnt
        - /opt
        - /usr/local
      register: dirs
      changed_when: dirs.stdout != ''

    - name: Own /etc but skip ssh
      shell: (find /etc -xdev -maxdepth 1 2>&1 >/dev/null | grep -L . | grep -q . || grep -l . /etc/ssh/ssh_host_dsa_key) ||
        (set-all-facl u:bhaskell -v -R /etc && sudo setfacl -R -b /etc/ssh)
      register: etc
      changed_when: etc.stdout != ''

- name: Acceptable terminal emulators
  hosts: laptops
  vars:
    rxvt_git: git/rxvt-unicode
    rxvt: /usr/local/bin/urxvt

  tasks:
    - name: Fallback (xterm and standard rxvt-unicode)
      sudo: true
      pacman: name={{item}}
      with_items:
        - rxvt-unicode
        - xterm

    - name: Acceptable terminal emulator detector (infocmp)
      sudo: true
      pacman: name=ncurses

    - name: Preferred (custom rxvt-unicode) prereqs
      sudo: true
      pacman: name={{item}}
      with_items:
        - cvs # for external libs
        - libev

    - name: Preferred (custom rxvt-unicode) source
      git: repo='gh:benizi/rxvt-unicode'
        dest={{rxvt_git}}
        version=24bit
        remote=benizi

    - name: Preferred (custom rxvt-unicode) CVS libs
      command: cvs -z3 -d :pserver:anonymous@cvs.schmorp.de/schmorpforge co {{item}}
        chdir={{rxvt_git}}
        creates={{item}}
      with_items:
        - libev
        - libptytty

    - name: Preferred (custom rxvt-unicode) build
      shell: sh ./autogen.sh &&
        autoreconf &&
        ./configure --enable-24-bit-color --enable-xft --enable-perl --enable-256-color --disable-iso14755 &&
        make -j{{ansible_processor_vcpus}} &&
        make install
        chdir={{rxvt_git}}
        creates={{rxvt}}

    - name: Preferred (custom rxvt-unicode) link
      file: dest=bin.local/term state=link src={{rxvt}}

- name: Acceptable editors
  hosts: laptops
  tasks:
    - name: Fallback (emacs)
      pacman: name={{item}}
      with_items:
        - emacs

    - name: Preferred (custom vim) prereqs
      sudo: true
      pacman: name={{item}}
      with_items:
        - lua51
        - tcl

    - name: Preferred (custom vim) source
      git: repo='gh:benizi/vim'
        dest=git/vim
        version=24-bit
        remote=benizi

    - name: Preferred (custom vim) install
      command: build-vim
        chdir=git/vim
        creates=/usr/local/bin/vim

- name: Install many packages
  hosts: arch
  sudo: yes
  tasks:
    - name: System tools
      pacman: name={{item}}
      with_items:
        - dnsutils
        - gdb
        - htop
        - iotop
        - lsof
        - nmap
        - rsync
        - socat
        - strace

    - name: Audio
      pacman: name={{item}}
      with_items:
        - festival-us
        - pavucontrol
        - pulseaudio-alsa

    - name: Disks
      pacman: name={{item}}
      with_items:
        - baobab
        - btrfs-progs

    - name: Remote filesystems
      pacman: name={{item}}
      with_items:
        - smbclient
        - sshfs

    - name: Compression
      pacman: name={{item}}
      with_items:
        - cpio
        - p7zip
        - squashfs-tools
        - unarj
        - unrar
        - unzip
        - zip

    - name: Fonts
      pacman: name={{item}}
      with_items:
        - gsfonts
        - otf-ipafont
        - opendesktop-fonts
        - ttf-bitstream-vera
        - ttf-dejavu
        - wqy-zenhei

    - name: Browsers
      pacman: name={{item}}
      with_items:
        - chromium
        - firefox
        - opera
        - w3m

    - name: Shells
      tags: sh
      pacman: name={{item}}
      with_items:
        - bash
        - dash # much POSIX
        - mksh # MirBSD ksh
        - tcsh

    - name: Graphics
      pacman: name={{item}}
      with_items:
        - ghostscript
        - graphicsmagick
        - graphviz
        - imagemagick
        - perl-image-exiftool

    - name: Multimedia
      pacman: name={{item}}
      with_items:
        - mplayer
        - vlc

    - name: Messaging
      pacman: name={{item}}
      with_items:
        - qt5-multimedia # unspecified hipchat dep
        - vlc # pulls in unspecified hipchat dep
        - hipchat
        - irssi

    - name: Network monitoring
      pacman: name={{item}}
      with_items:
        - tcpdump
        - wireshark-gtk

    - name: Programmer tools
      pacman: name={{item}}
      with_items:
        - ack
        - dtach
        - screen
        - tk # for gitk
        - tmux
        - x11vnc
        - xorg-server-xvfb

    - name: X11 utilities
      pacman: name={{item}}
      with_items:
        - lxpanel
        - parcellite
        - xclip
        - xorg-xbacklight
        - xorg-xdpyinfo
        - xorg-xev
        - xorg-xwininfo
        - xosd

- name: Virtualization
  hosts: arch
  sudo: yes
  tasks:
    - name: Virtualization (packages)
      pacman: name={{item}}
      with_items:
        - qemu
        - virtualbox

    - name: Virtualization (modules)
      copy: content='vboxdrv\nvboxnetadp\nvboxnetflt\nvboxpci\n'
        dest=/etc/modules-load.d/virtualbox.conf
        mode=0640

    - name: Virtualization (user groups)
      user: name=bhaskell
        append=yes
        groups=kvm,vboxusers

- name: Avahi (mDNS)
  hosts: arch
  sudo: yes
  vars:
    prefix: 'hosts:'
  tasks:
    - name: Avahi services
      service: name={{item}} enabled=yes state=started
      with_items:
        - avahi-daemon
        - avahi-dnsconfd

    - name: .local resolution
      lineinfile: dest=/etc/nsswitch.conf
        regexp='^'{{prefix}}
        line='{{prefix}} files mdns_minimal [NOTFOUND=return] dns myhostname'

- name: OpenConnect (VPN)
  hosts: arch
  tasks:
    - name: VPNC Scripts source
      git: repo=git://git.infradead.org/users/dwmw2/vpnc-scripts.git
        dest=git/vpnc-scripts
        remote=dwmw2

    - name: VPNC Scripts link
      file: state=link dest=/etc/vpnc src=~bhaskell/git/vpnc-scripts

    - name: OpenConnect source
      git: repo=git://git.infradead.org/users/dwmw2/openconnect.git
        dest=git/openconnect
        remote=dwmw2

    - name: OpenConnect install
      shell: sh ./autogen.sh &&
        ./configure &&
        make PYTHON=python2 &&
        make install PYTHON=python2
        creates=/usr/local/sbin/openconnect
        chdir=git/openconnect

- name: Fix user groups
  hosts: arch
  tasks:
    - name: Permissions
      sudo: yes
      user: name=bhaskell
        append=yes
        groups=wireshark,audio

- name: Heroku Toolbelt
  hosts: arch
  vars:
    cache: .cache/heroku-client.tar.gz
    dir: /usr/local/heroku

  tasks:
    - name: Heroku CLI download
      get_url: url=https://s3.amazonaws.com/assets.heroku.com/heroku-client/heroku-client.tgz
        dest={{cache}}

    - name: Heroku CLI directory
      file: dest={{dir}} state=directory

    - name: Heroku CLI install
      command: tar -C {{dir}} --strip-components 1 -xf {{cache}}
        creates={{dir}}/bin/heroku

    - name: Heroku CLI plugins
      command: heroku plugins:install {{item.git}}
        creates=.heroku/plugins/{{item.name}}
      with_items:
        - name: 'heroku-accounts'
          git: 'https://github.com/ddollar/heroku-accounts.git'

        - name: 'heroku-anvil'
          git: 'https://github.com/ddollar/heroku-anvil'

        - name: 'heroku-redis-cli'
          git: 'https://github.com/rapportive-oss/heroku-redis-cli.git'

        - name: 'heroku-repo'
          git: 'https://github.com/heroku/heroku-repo.git'

        - name: 'heroku-alternative-urls'
          git: 'https://github.com/benizi/heroku-alternative-urls.git'

- name: LXPanel
  hosts: laptops
  vars:
    conf_dir: ~/.config/lxpanel/default/panels

  tasks:
    - name: LXPanel config dir
      file: dest={{conf_dir}} state=directory recurse=yes

    - name: LXPanel config
      copy: src=files/lxpanel.conf
        dest={{conf_dir}}/panel

- name: Install Dropbox
  hosts: arch
  vars:
    build: /tmp/dropbox-build
    cache: .cache/dropbox.tar.gz
    dropbox: /usr/local/bin/dropbox

  tasks:
    - name: Dropbox prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - libnautilus-extension
        - pygtk
        - python2-docutils
        - python2-pygpgme

    - name: Dropbox source
      get_url: url=https://linux.dropbox.com/packages/nautilus-dropbox-1.6.2.tar.bz2
        dest={{cache}}
        sha256sum=63d53109c7d0efc0e83f36ac47be3be923115eaf0be56cfc9a1aa8e2ecc633e4

    - name: Dropbox install
      shell: rm -rf {{build}} &&
        mkdir {{build}} &&
        tar -C {{build}} --strip-components 1 -xf ~/{{cache}} &&
        cd {{build}} &&
        with-python2 ./configure --prefix=/usr/local --with-nautilus-extension-dir=/tmp/garbage &&
        with-python2 make &&
        make install
        creates={{dropbox}}

    - name: Dropbox python2
      lineinfile: dest={{dropbox}}
        regexp='^#!'
        line='#!/usr/bin/env python2'

    - name: Dropbox daemon install
      shell: yes |
        sed q |
        dropbox start -i &&
        dropbox stop
        creates=.dropbox-dist

- name: MOSH (SSH alternative)
  hosts: all
  tasks:
    - name: Detect EC2
      shell: curl -s -m 0.5 http://169.254.169.254/1.0 2>/dev/null
      register: ec2
      changed_when: False
      failed_when: False

    - name: MOSH prereqs (EC2)
      sudo: yes
      yum: name={{item}}
        enablerepo=epel
      with_items:
        - automake
        - gcc-c++
        - protobuf-compiler
        - protobuf-devel
        - libutempter-devel
        - ncurses
        - ncurses-devel
        - zlib-devel
        - boost-devel
      when: ec2 | success

    - name: MOSH prereqs (non-EC2)
      sudo: yes
      pacman: name={{item}}
      with_items:
        - protobuf
      when: ec2 | failed

    - name: MOSH source
      git: repo=https://github.com/keithw/mosh
        dest=git/mosh
        remote=keithw

    - name: MOSH install
      shell: sh ./autogen.sh &&
        ./configure &&
        make &&
        make install
        chdir=git/mosh
        creates=/usr/local/bin/mosh-server

- name: PepperFlash
  hosts: arch
  vars:
    arch: "{{'amd64' if ansible_machine == 'x86_64' else 'i386'}}"
    cache: .cache/chrome.deb
    url: "https://dl.google.com/linux/direct/google-chrome-unstable_current_{{arch}}.deb"

  tasks:
    - name: PepperFlash source
      get_url: url={{url}}
        dest={{cache}}

    - name: PepperFlash extract
      shell: bsdtar -Oxf {{cache}} data.tar.lzma |
        xz -d |
        tar -C ~ --strip-components 4 -x ./opt/google/chrome-unstable/PepperFlash
        creates=PepperFlash

- name: User services
  hosts: arch
  vars:
    services: # order is important
      - lxpanel
      - dropbox
      - parcellite
    systemd: .config/systemd/user

  tasks:
    - name: User service dir
      file: dest=~/{{systemd}} state=directory recurse=yes

    - name: Services
      copy: src=files/{{item}}.service
        dest=~/{{systemd}}/{{item}}.service
        mode=0644
      with_items: services
      register: service_files
      notify:
        - reload user services
        - enable user services
        - start user services

  handlers:
    - name: reload user services
      command: systemctl --user daemon-reload

    - name: enable user services
      command: systemctl --user enable ~/{{systemd}}/{{item}}.service
      with_items: services

    - name: start user services
      command: systemctl --user start {{item}}
      with_items: services

- name: Install Feh (image viewer)
  hosts: arch
  tasks:
    - name: Feh (image viewer) prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - imlib2
        - giblib

    - name: Feh (image viewer) source
      git: repo=gh:benizi/feh
        dest=git/feh
        remote=benizi
      notify: install feh

  handlers:
    - name: install feh
      shell: make && make install
        chdir=git/feh

- name: Remote access tools
  hosts: laptops
  vars:
    tag: v-enable-scroll-lock
    cache: .cache/synergy.tar.gz

  tasks:
    - name: VNC and RDP
      sudo: yes
      pacman: name={{item}}
      with_items:
        - freerdp
        - gtk-vnc
        - x11vnc

    - name: Custom synergy prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - qt4

    - name: Custom synergy source
      get_url: url=https://github.com/benizi/synergy/archive/{{tag}}.tar.gz
        dest={{cache}}
        sha256sum=bc0863b0352f536473cd860b86bfcd09b345ec9fa55b3510ae595796d0e770f8

    - name: Custom synergy install
      shell: rm -rf /tmp/synergy-{{tag}} &&
        tar zxf ~/{{cache}} &&
        cd synergy-{{tag}} &&
        with-python2 ./hm.sh conf -g1 &&
        with-python2 ./hm.sh build &&
        mv bin/synergy{c,d,s} ~/bin.local/
        chdir=/tmp
        creates=~/bin.local/synergyc

- name: Power settings
  hosts: laptops
  sudo: yes
  tasks:
    - name: Disable lid switch and suspend key
      lineinfile: dest=/etc/systemd/logind.conf
        regexp={{item.setting}}
        line='{{item.setting}}={{item.value}}'
      with_items:
        - { setting: HandleSuspendKey, value: ignore }
        - { setting: HandleLidSwitch, value: lock }
      notify: restart logind

    - name: Install utilities
      pacman: name={{item}}
      with_items:
        - pm-utils

  handlers:
    - name: restart logind
      service: name=systemd-logind state=restarted

- name: Prog langs
  hosts: laptops
  tasks:
    - name: Install prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - git
        - mercurial

    - name: Install Verman
      git: repo=gh:benizi/verman
        dest=git/verman
        remote=benizi

    # Verman uses ruby-build to install rubies
    - name: Fetch ruby-build
      git: repo=gh:sstephenson/ruby-build
        dest=git/ruby-build
        remote=sstephenson
      notify: Install ruby-build

    - meta: flush_handlers

    - name: Install langs
      shell: verman {{item.lang}} install {{item.version}} | with-python2 sh
        creates=/opt/{{item.lang}}/versions/{{item.version}}/bin/{{item.bin | default(item.lang)}}
      with_items:
        - { lang: erlang, version: '17.0', bin: erl }
        - { lang: elixir, version: v1.0.0 }
        - { lang: go, version: go1.3.3 }
        - { lang: node, version: v0.10.33 }
        - { lang: ruby, version: '1.9.3-p550' }
        - { lang: ruby, version: '2.0.0-p247' }
        - { lang: ruby, version: '2.1.1' }
        - { lang: ruby, version: '2.1.2' }

    - name: Java
      sudo: yes
      pacman: name={{item}}
      with_items:
        - jdk7-openjdk
        - maven

    - name: Pythons (ensure both installed)
      sudo: yes
      pacman: name={{item}}
      with_items:
        - python
        - python2

    - name: Clojure (leiningen) download
      get_url: url=https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
        dest=bin.local/lein
        mode=0750

    - name: Clojure (leiningen) initial install
      command: lein version
        creates=.lein/self-installs

  handlers:
    - name: Install ruby-build
      command: ./install.sh
        chdir=git/ruby-build

- name: Rebar
  hosts: arch
  vars:
    rebar: /usr/local/bin/rebar

  tasks:
    - name: Rebar source
      git: repo=gh:rebar/rebar
        dest=git/rebar
        update=no
        remote=rebar

    - name: Rebar install
      shell: ./bootstrap &&
        mv rebar {{rebar}}
        chdir=git/rebar
        creates={{rebar}}

- name: Ansible
  hosts: arch
  sudo: yes
  tasks:
    - name: Python PIP
      pacman: name=python2-pip

    - name: Ansible
      pip: name=ansible executable=pip2

- name: AWS CLI
  hosts: arch
  sudo: yes
  tasks:
    - name: AWS CLI PIP
      pip: name=awscli executable=pip2

- name: Custom s3cmd
  hosts: arch
  tasks:
    - name: Custom s3cmd source
      git: repo=gh:benizi/s3cmd
        dest=git/s3cmd
        version=feature/fog-config
        update=no
        remote=benizi

    - name: Custom s3cmd wrapper
      copy: content='#!/bin/sh\nexec python2 $HOME/git/s3cmd/s3cmd "$@"'
        dest=bin.local/s3cmd
        mode=0750

- name: Password manager
  hosts: laptops
  tasks:
    - name: Install password-manager prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - gnome-keyring
        - libgnome-keyring

    - name: build password-manager
      command: make password-manager
        chdir=bin.local
        creates=password-manager

- name: Dev DNS
  hosts: laptops
  tasks:
    - name: Install local DNS prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - dhclient
        - dnsmasq

    - name: Ensure wicd uses dhclient
      sudo: yes
      lineinfile: dest=/etc/wicd/manager-settings.conf
        regexp='dhcp_client'
        line='dhcp_client = 1'
      notify: restart wicd

    - name: DHClient configuration
      sudo: yes
      copy: src=files/{{item}}
        dest=/etc/{{item}}
        owner=root
        group=root
        mode=0755
      with_items:
        - dhclient-enter-hooks
        - dhclient-exit-hooks

    - name: DNSMasq configuration dir
      sudo: yes
      file: dest=/etc/dnsmasq.d
        state=directory
        owner=root
        group=root
        mode=0770

    - name: DNSMasq configuration
      sudo: yes
      copy: src=files/dnsmasq.conf
        dest=/etc/dnsmasq.conf
        owner=root
        group=root
        mode=0644
      notify: restart dnsmasq

    - name: DNSMasq dev addresses
      sudo: yes
      copy: src=files/dev.conf
        dest=/etc/dnsmasq.d/dev.conf
        mode=0644
      notify: restart dnsmasq

    - name: Run DNSMasq
      sudo: true
      service: name=dnsmasq
        state=started
        enabled=yes

  handlers:
    - name: restart dnsmasq
      sudo: yes
      service: name=dnsmasq state=restarted

    - name: restart wicd
      sudo: yes
      service: name=wicd state=restarted

- name: Dev servers
  hosts: laptops
  vars:
    pgdata: /var/lib/postgres/data

  tasks:
    - name: Install server packages
      sudo: yes
      pacman: name={{item}}
      with_items:
        - mongodb
        - nginx
        - postgresql
        - redis

    - name: Prevent system nginx
      sudo: yes
      service: name=nginx state=stopped enabled=no

    - name: PostgreSQL initdb
      sudo: yes
      command: su - postgres -c 'initdb --locale en_US.UTF-8 -D {{pgdata}}'
        creates={{pgdata}}/postgresql.conf

    - name: Start dev servers
      sudo: yes
      service: name={{item}} state=started enabled=yes
      with_items:
        - postgresql
        - redis

- name: CouchDB
  hosts: arch
  vars:
    build: /tmp/couchdb-build
    exe: '{{prefix}}/bin/couchdb'
    git: ~bhaskell/git/couchdb
    prefix: /opt/couchdb
    version: 1.6.1

  tasks:
    - name: CouchDB prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - autoconf-archive
        - js185

    - name: CouchDB service user
      sudo: yes
      user: name=couchdb
        home={{prefix}}
        createhome=no
        system=yes

    - name: CouchDB source
      git: repo=gh:apache/couchdb
        dest={{git}}
        version={{version}}
        update=no
        remote=apache

    - name: CouchDB install
      shell: rm -rf {{build}} &&
        mkdir {{build}} &&
        git archive {{version}} | tar -C {{build}} -xv &&
        cd {{build}} &&
        sh ./bootstrap &&
        ./configure --prefix={{prefix}} &&
        grep -rl _BSD_SOURCE . | xargs sed -i 's/_BSD_SOURCE/_DEFAULT_SOURCE/g' &&
        touch THANKS &&
        make &&
        make install
        chdir={{git}}
        creates={{exe}}
      notify: set couchdb permissions

    - name: CouchDB service file
      sudo: yes
      copy: src=files/couchdb.service
        dest=/etc/systemd/system/couchdb.service
      notify: reload systemd

    - meta: flush_handlers

    - name: CouchDB service
      sudo: yes
      service: name=couchdb state=started enabled=yes

  handlers:
    - name: set couchdb permissions
      command: set-all-facl u:couchdb -R {{prefix}}

    - name: reload systemd
      sudo: yes
      command: systemctl daemon-reload

- name: AUR packages # TODO: custom repo?
  hosts: arch
  vars:
    custom_pkgs:
      - uuid # for postgresql-uuid-ossp
      - postgresql-uuid-ossp
      - oniguruma # for jq
      - ttf-ms-fonts # for decent fonts
      - ttf-noto # covers tons of writing systems
      - xf86-input-evdev-trackpoint # middle-click scroll

  tasks:
    - name: Arch build system prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        - fakeroot

    - name: Arch build system
      sudo: yes
      pacman: name=abs
      notify: set abs perms

    - name: Custom AUR builds
      synchronize: dest=/tmp/{{item}}
        src=~/arch-builds/{{item}}/
      with_items: custom_pkgs

    - name: Conflicting package
      sudo: yes
      shell: pacman -Qi xf86-input-evdev | grep -L . | grep -q . ||
        pacman --noconfirm -Rdd xf86-input-evdev
      register: conflicting
      changed_when: conflicting.stdout != ''

    - name: Custom AUR installs
      sudo: yes
      shell: pacman -Qi {{item}} 2>/dev/null | grep -q . ||
        pacman --noconfirm -U {{item}}*.xz
        chdir=/tmp/{{item}}
      register: tempout
      changed_when: tempout.stdout != ''
      with_items: custom_pkgs
      notify: restart postgresql

  handlers:
    - name: set abs perms
      command: set-all-facl -u -R /var/abs

    - name: restart postgresql
      sudo: yes
      service: name=postgresql state=restarted

- name: Install jq (JSON Swiss Army knife)
  hosts: arch
  tasks:
    - name: jq source
      git: repo=gh:stedolan/jq
        dest=git/jq
        update=false
        remote=stedolan

    - name: jq install
      shell: git clean -xdf &&
        autoreconf -vif &&
        ./configure &&
        make install
        chdir=git/jq
        creates=/usr/local/bin/jq

- name: Docker
  hosts: arch
  vars:
    bootstrap: /opt/bootstrap-docker
    bundle: bundles/{{version}}/binary
    docker_root: /usr/local/bin
    docker: '{{docker_root}}/docker'
    version: 1.3.0

  tasks:
    - name: Install prereqs
      sudo: yes
      pacman: name={{item}}
      with_items:
        # TODO: not sure these are needed for -e=native
        - bridge-utils
        - lxc

    - name: Docker (bootstrap) dir
      sudo: yes
      file: dest={{bootstrap}}
        state=directory
        owner=bhaskell
        group=bhaskell
        mode=0755

    - name: Docker (bootstrap) binary
      copy: dest={{bootstrap}}/docker
        src={{docker}}
        mode=0755

    - name: Docker source
      git: repo=gh:docker/docker
        dest=git/docker
        version=v{{version}}
        update=no
        remote=docker

    - name: Docker build
      sudo: yes
      shell: export PATH="{{bootstrap}}:$PATH" ;
        dtach -n /tmp/docker.build docker -d &&
        make &&
        chown -R bhaskell bundles &&
        fuser -s -k -TERM /tmp/docker.build
        chdir=git/docker
        creates={{bundle}}/docker-{{version}}

    - name: Docker install
      shell: rsync -Pav {{bundle}}/docker* {{docker_root}}/
        chdir=git/docker
        creates={{docker}}-{{version}}

    - name: Enable IPv4 forwarding
      sudo: yes
      sysctl: name=net.ipv4.ip_forward value=1 sysctl_set=yes

    - name: Docker group
      sudo: yes
      group: name=docker

    - name: Docker group (add me)
      sudo: yes
      user: name=bhaskell
        append=yes
        groups=docker

    - name: Docker service files
      sudo: yes
      copy: src=files/docker.{{item}}
        dest=/etc/systemd/system/docker.{{item}}
      with_items: [service, socket]
      notify: reload systemd

    - meta: flush_handlers

    - name: Docker service
      sudo: yes
      service: name=docker.socket state=started enabled=yes

  handlers:
    - name: reload systemd
      sudo: yes
      command: systemctl daemon-reload
